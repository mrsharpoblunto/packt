'use strict';

const os = require('os');
const path = require('path');

/**
 * NOTE: this entire object must be serializable as it gets
 * passed around to worker processes - no stateful objects 
 * allowed!
 */
module.exports = {

  /**
   * option which for performance or logical reasons cannot vary
   * between build variants
   */
  invariantOptions: {
    workers: os.cpus().length - 1,
    outputPath: path.join(__dirname,'_build'),
    outputFormat: '${options.lang}_${filename}.${ext}/${hash}.${ext}',
    outputHash: 'md5',
    outputHashLength: 12,
  }, 

  /**
   * shared options object available to all handlers & emitters.
   * Handlers & emitters will receive a unique options object
   * for each variant which is generated by merging
   *  base + (variant) + invariants. in this way it is possible to
   * override base values with variant values, but not possible to
   * override invariant values.
   */
  options: {
    base: {
    },
    variants: {
       // dictionary of values overriding base
    }
  },

  bundles: {
    // entrypoint bundles are considered independent and will build thier
    // own dependency tree. They will however use deps from any library chunks
      // or matching common chunks. Any modules loaded dynamically in these entrypoints will create thier own chunk and will share any common/lib dependencies from thier parent. Think of dynamic chunks as creating a duplicate of thier parent chunk with a different entrypoint require. NOTE: dynamic entrpoints are deduped, so that identical combinations of require/depends/bundler will result in a single asset output.
      // Also NOTE: if multiple dynamic chunks with the same entrypoint are created but with different depends this should result in a warning as its probably not intended by the user.
    'Index.js': {
      type: 'entrypoint',
      requires: ['lib/entrypoint.js'],
      depends: ['Vendor.js', 'Common.js', 'Common.css'],
      bundler: 'js',
    },
    // library bundles pull in a set of specific modules which other entrypoint modules
    // can then share
    'Vendor.js': {
      type: 'library',
      requires: ['react'],
      bundler: 'js',
    },
    // pulls out matching modules that appear in multiple entrypoint bundles
    // but are not part of a library bundle
    'Common.js': {
      type: 'common',
      threshold: 0.5,
      contentTypes: [
        'application/json',
        'text/javascript',
      ],
      bundler: 'js',
    },
    'Common.css': {
      type: 'common',
      threshold: 0,
      contentTypes: [
        'text/css',
      ],
      bundler: 'css',
    },
  },

  /**
   * configures how resources get bundled together
   */
  bundlers: {
    'css': {
      require: 'packt-bundler-css',
      invariantOptions: {
        minify: true,
      },
    },
    'raw': {
      require: 'packt-bundler-raw',
    },
    'js': {
      require: 'packt-bundler-js',
      invariantOptions: {
        minify: true,
      },
    },
},

  /**
   * resolvers are used to locate the full path to a module. Once resolved
   * the path should match one of the handlers configured below.
   * NOTE: For performance reasons resolvers are invariant.
   */
  resolvers: {
    custom: [
      {
        require: 'packt-resolver-haste',
        invariantOptions: {
          modulePath: path.join(__dirname,'lib'),
        }
      },
    ],
    /**
     * The default filesystem resolver
     */
    default: {
      invariantOptions: {
        searchPaths: [
          path.join(__dirname, 'lib'),
          'node_modules',
        ],
        extensions: ['.js','.json','.scss','.css','.png','.jpg'],
      },
    },
  },

  /**
   * Handlers are used to process a module once it has been resolved by a
   * resolver. While processing, the handler should also notify when it
   * locates any dependencies the current module has to other modules
   */
  handlers: [
    {
      pattern: '\\.js$',
      require: 'packt-handler-babel-js',
      options: {
        base: {
            ignore: [
              '/node_modules/',
            ],
        },
        variants: {
        },
      },
      invariantOptions: {
      },
    },
    {
      pattern: '\\.json$',
      require: 'packt-handler-json',
      options: {
        base: {
        },
        variants: {
        },
      },
      invariantOptions: {
      },
    },
    {
      pattern: '\\.css$',
      require: 'packt-handler-post-css',
      options: {
        base: {
        },
        variants: {
        },
      },
      invariantOptions: {
      },
    },
    {
      pattern: '\\.(jpg|png)$',
      require: 'packt-handler-ignore',
      options: {
        base: {
        },
        variants: {
        },
      },
      invariantOptions: {
      },
    },
  ],
};
