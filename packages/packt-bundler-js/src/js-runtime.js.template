window.module = window.module || {};

window.__packt_style__= window.__packt_style__ || function(contentHash, content) {
  if (typeof document !== 'object' || !document.createElement) {
    global._cssMarkup = global._cssMarkup || [];
    global._cssMarkup.push({
      hash: contentHash,
      css: content,
    });
    return;
  }

  var head = document.getElementsByTagName('head')[0];
  var styleElement = head.querySelector('[data-packt-hash="' + contentHash + '"]');

  if (!styleElement) {
    styleElement = document.createElement('style');
    styleElement.type = 'text/css';
    styleElement.setAttribute('data-packt-hash',contentHash);
    head.appendChild(styleElement);
    if (styleElement.styleSheet) {
      styleElement.styleSheet.cssText = content;
    } else {
      styleElement.appendChild(document.createTextNode(content));
    }
  }
};

window.__packt_dynamic_import_impl__ = window.__packt_dynamic_import_impl__ || function(url, identifier) {
  // dynamic import has already loaded
  if (window[identifier]) {
    return Promise.resolve(window[identifier]);
  }

  var head = document.getElementsByTagName('head')[0];
  var scriptElement = head.querySelector('script[src="' + url + '"]');
  var originalOnload;
  var originalOnerror;

  if (scriptElement) {
    // dynamic import has started loading already, but isn't finished yet
    originalOnload = scriptElement.onload;
    originalOnerror = scriptElement.onerror;
  } else {
    // this is the first time the dynamic import has been requested
    var scriptElement = document.createElement('script');
    scriptElement.type = 'text/javascript';
    scriptElement.async = true;
    scriptElement.src = url;
    var head = document.getElementsByTagName('head')[0];
    head.appendChild(scriptElement);
  }
  
  // use the native promise implementation, or whatever polyfill the user
  // has specified - to keep the runtime size down, we don't supply a polyfill
  return new Promise(function(resolve, reject) {
    scriptElement.onload = function() {
      resolve(window[identifier]);
      originalOnload && originalOnload();
    };
    scriptElement.onerror = function(err) {
      reject(err);
      originalOnerror && originalOnError(err);
    };
  });
};

window.__packt_unresolvable_import__ = window.__packt_unresolvable_import || function(modulePath) {
  var err = new Error('Packt was unable to resolve the module ' + modulePath + ' at build time');
  err.code = 'MODULE_NOT_FOUND';
  throw err;
};
